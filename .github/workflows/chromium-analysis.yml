name: Chromium Package Analysis

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  analyze-chromium:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm2cpio cpio curl rpm
        
        # Install 7zip which can handle large RPM files
        sudo apt-get install -y p7zip-full
        
    - name: Find latest Chromium RPM
      id: find-rpm
      run: |
        # Fetch the directory listing and extract the latest chromium source RPM
        echo "Fetching Chromium packages from Fedora EPEL..."
        CHROMIUM_RPM=$(curl -s https://dl.fedoraproject.org/pub/epel/8/Everything/source/tree/Packages/c/ | \
          grep -o 'chromium-[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.el8\.src\.rpm' | \
          sort -V | tail -1)
        
        if [ -z "$CHROMIUM_RPM" ]; then
          echo "Error: Could not find Chromium RPM"
          exit 1
        fi
        
        echo "Found latest Chromium RPM: $CHROMIUM_RPM"
        echo "rpm_name=$CHROMIUM_RPM" >> $GITHUB_OUTPUT
        
        # Extract version for later use
        VERSION=$(echo "$CHROMIUM_RPM" | sed 's/chromium-\([0-9\.]\+\)-.*\.src\.rpm/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Download Chromium RPM
      run: |
        RPM_NAME="${{ steps.find-rpm.outputs.rpm_name }}"
        RPM_URL="https://dl.fedoraproject.org/pub/epel/8/Everything/source/tree/Packages/c/$RPM_NAME"
        
        echo "Downloading $RPM_URL..."
        curl -L -o "$RPM_NAME" "$RPM_URL"
        
        if [ ! -f "$RPM_NAME" ]; then
          echo "Error: Failed to download $RPM_NAME"
          exit 1
        fi
        
        echo "Successfully downloaded $RPM_NAME ($(ls -lh "$RPM_NAME" | awk '{print $5}'))"
        
    - name: Extract RPM contents
      run: |
        RPM_NAME="${{ steps.find-rpm.outputs.rpm_name }}"
        
        echo "Extracting $RPM_NAME..."
        mkdir -p chromium-extracted
        cd chromium-extracted
        
        # Check file size first
        FILE_SIZE=$(stat -c%s "../$RPM_NAME")
        echo "RPM file size: $FILE_SIZE bytes ($(numfmt --to=iec $FILE_SIZE))"
        
        # For large files, use 7zip with proper handling of compressed cpio
        if [ $FILE_SIZE -gt 4294967296 ]; then
          echo "Large file detected, using 7zip with multi-step extraction..."
          
          # Step 1: Extract RPM to get the compressed cpio
          7z x "../$RPM_NAME" -y
          
          # Step 2: Find the extracted cpio file (could be .cpio, .cpio.gz, .cpio.xz)
          if [ -f *.cpio.gz ]; then
            echo "Found gzip-compressed cpio, extracting..."
            gunzip *.cpio.gz
          elif [ -f *.cpio.xz ]; then
            echo "Found xz-compressed cpio, extracting..."
            xz -d *.cpio.xz
          fi
          
          # Step 3: Extract the cpio archive
          if [ -f *.cpio ]; then
            echo "Extracting cpio archive..."
            # Use 7zip to extract cpio, ignore warnings about data after end
            7z x *.cpio -y || true
            rm -f *.cpio
          fi
          
        else
          echo "Using standard rpm2cpio + cpio..."
          rpm2cpio "../$RPM_NAME" | cpio -idmv
        fi
        
        echo "Extraction complete. Contents:"
        ls -la
        
    - name: Create fossa-deps.yml
      run: |
        VERSION="${{ steps.find-rpm.outputs.version }}"
        RPM_NAME="${{ steps.find-rpm.outputs.rpm_name }}"
        
        cat > fossa-deps.yml << 'EOF'
        # FOSSA dependencies file for Chromium source package
        # Generated automatically by GitHub Actions
        
        vendor-dependencies:
          - name: chromium
            version: "VERSION_PLACEHOLDER"
            path: "chromium-extracted/"

        EOF

        # Replace placeholders with actual values
        sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" fossa-deps.yml
        sed -i "s/RPM_NAME_PLACEHOLDER/$RPM_NAME/g" fossa-deps.yml
        
        echo "Created fossa-deps.yml:"
        cat fossa-deps.yml
        
    - name: Setup FOSSA CLI
      run: |
        # Download and install FOSSA CLI
        curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
        
    - name: Run FOSSA analysis
      env:
        FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      run: |
        # Run FOSSA analysis with first-party scans disabled
        echo "Running FOSSA analysis with first-party scans disabled..."
        
        # Set project title to include Chromium version
        PROJECT_TITLE="Chromium-${{ steps.find-rpm.outputs.version }}-Analysis"
        
        fossa analyze \
          --title "$PROJECT_TITLE" \
          --experimental-block-first-party-scans \
          --exclude-path . \
          --debug

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chromium-analysis-artifacts
        path: |
          fossa-deps.yml
          fossa-attribution-report.json
          ${{ steps.find-rpm.outputs.rpm_name }}
        retention-days: 30
        
    - name: Summary
      run: |
        echo "## Chromium Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: ${{ steps.find-rpm.outputs.rpm_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.find-rpm.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Extraction**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **FOSSA Analysis**: ✅ Completed with first-party scans disabled" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts**: Available for download" >> $GITHUB_STEP_SUMMARY
